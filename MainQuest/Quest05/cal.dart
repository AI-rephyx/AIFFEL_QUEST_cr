import 'dart:io';                     // File Í∞ùÏ≤¥ ÏÇ¨Ïö©
import 'package:image_picker/image_picker.dart'; // Ïπ¥Î©îÎùº & Í∞§Îü¨Î¶¨ ÏÇ¨Ïö©
import 'package:flutter/material.dart';
import 'package:intl/intl.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      debugShowCheckedModeBanner: false,
      title: 'Ïö¥Îèô ÏÉùÎ¶¨Ìïô Í≥ÑÏÇ∞Í∏∞',
      theme: ThemeData(primarySwatch: Colors.blue),
      home: PersonalInfoScreen(),
    );
  }
}

// üü¢ 1. Í∞úÏù∏Ï†ïÎ≥¥ ÏûÖÎ†• ÌôîÎ©¥
class PersonalInfoScreen extends StatefulWidget {
  @override
  _PersonalInfoScreenState createState() => _PersonalInfoScreenState();
}

class _PersonalInfoScreenState extends State<PersonalInfoScreen> {
  final _formKey = GlobalKey<FormState>();

  final TextEditingController _nameController = TextEditingController();
  final TextEditingController _heightController = TextEditingController();
  final TextEditingController _weightController = TextEditingController();
  final TextEditingController _birthDateController = TextEditingController();

  String _selectedGender = 'ÎÇ®ÏÑ±'; // Í∏∞Î≥∏Í∞í

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: Text("Í∞úÏù∏ Ï†ïÎ≥¥ ÏûÖÎ†•")),
      body: Padding(
        padding: EdgeInsets.all(16.0),
        child: Form(
          key: _formKey,
          child: ListView(
            children: [
              // Ïù¥Î¶Ñ
              TextFormField(
                controller: _nameController,
                decoration: InputDecoration(labelText: "Ïù¥Î¶Ñ"),
                validator: (value) {
                  if (value == null || value.isEmpty) {
                    return 'Ïù¥Î¶ÑÏùÑ ÏûÖÎ†•Ìï¥Ï£ºÏÑ∏Ïöî.';
                  }
                  return null;
                },
              ),
              SizedBox(height: 10),

              // ÏÑ±Î≥Ñ (Dropdown)
              DropdownButtonFormField<String>(
                value: _selectedGender,
                decoration: InputDecoration(labelText: 'ÏÑ±Î≥Ñ'),
                items: ['ÎÇ®ÏÑ±', 'Ïó¨ÏÑ±'].map((gender) {
                  return DropdownMenuItem(
                    value: gender,
                    child: Text(gender),
                  );
                }).toList(),
                onChanged: (value) {
                  setState(() {
                    _selectedGender = value ?? 'ÎÇ®ÏÑ±';
                  });
                },
              ),
              SizedBox(height: 10),

              // ÌÇ§
              TextFormField(
                controller: _heightController,
                decoration: InputDecoration(labelText: "ÌÇ§ (cm)"),
                keyboardType: TextInputType.number,
                validator: (value) {
                  if (value == null || value.isEmpty) {
                    return 'ÌÇ§Î•º ÏûÖÎ†•Ìï¥Ï£ºÏÑ∏Ïöî.';
                  }
                  if (double.tryParse(value) == null) {
                    return 'Ïà´ÏûêÎßå ÏûÖÎ†• Í∞ÄÎä•Ìï©ÎãàÎã§.';
                  }
                  return null;
                },
              ),
              SizedBox(height: 10),

              // Ï≤¥Ï§ë
              TextFormField(
                controller: _weightController,
                decoration: InputDecoration(labelText: "Ï≤¥Ï§ë (kg)"),
                keyboardType: TextInputType.number,
                validator: (value) {
                  if (value == null || value.isEmpty) {
                    return 'Ï≤¥Ï§ëÏùÑ ÏûÖÎ†•Ìï¥Ï£ºÏÑ∏Ïöî.';
                  }
                  if (double.tryParse(value) == null) {
                    return 'Ïà´ÏûêÎßå ÏûÖÎ†• Í∞ÄÎä•Ìï©ÎãàÎã§.';
                  }
                  return null;
                },
              ),
              SizedBox(height: 10),

              // ÏÉùÎÖÑÏõîÏùº: ÏßÅÏ†ë ÏûÖÎ†• ÎåÄÏã† DatePicker ÏÇ¨Ïö©
              TextFormField(
                controller: _birthDateController,
                decoration: InputDecoration(labelText: "ÏÉùÎÖÑÏõîÏùº"),
                readOnly: true,
                onTap: () async {
                  DateTime? picked = await showDatePicker(
                    context: context,
                    initialDate: DateTime(2000),
                    firstDate: DateTime(1900),
                    lastDate: DateTime.now(),
                  );
                  if (picked != null) {
                    _birthDateController.text =
                        DateFormat('yyyy-MM-dd').format(picked);
                  }
                },
                validator: (value) {
                  if (value == null || value.isEmpty) {
                    return 'ÏÉùÎÖÑÏõîÏùºÏùÑ ÏÑ†ÌÉùÌï¥Ï£ºÏÑ∏Ïöî.';
                  }
                  return null;
                },
              ),
              SizedBox(height: 20),

              // Îã§Ïùå Î≤ÑÌäº
              ElevatedButton(
                onPressed: () {
                  if (_formKey.currentState!.validate()) {
                    Navigator.pushReplacement(
                      context,
                      MaterialPageRoute(
                        builder: (context) => HomeScreen(
                          name: _nameController.text,
                          gender: _selectedGender,
                          height: double.tryParse(_heightController.text) ?? 0.0,
                          weight: double.tryParse(_weightController.text) ?? 0.0,
                          birthDate: _birthDateController.text,
                        ),
                      ),
                    );
                  }
                },
                child: Text("Îã§Ïùå"),
              ),
            ],
          ),
        ),
      ),
    );
  }
}

// üü¢ 2. Ìôà ÌôîÎ©¥
class HomeScreen extends StatefulWidget {
  final String name;
  final String gender;
  final double height;
  final double weight;
  final String birthDate;

  HomeScreen({
    required this.name,
    required this.gender,
    required this.height,
    required this.weight,
    required this.birthDate,
  });

  @override
  _HomeScreenState createState() => _HomeScreenState();
}

class _HomeScreenState extends State<HomeScreen> {
  double hrMax = 0;
  double? vo2Max;
  int? age;
  File? _profileImage;

  final GlobalKey<ScaffoldState> _scaffoldKey = GlobalKey<ScaffoldState>();

  @override
  void initState() {
    super.initState();
    _calculateHRmax();
  }

  void _calculateHRmax() {
    try {
      DateTime birthDate = DateFormat("yyyy-MM-dd").parse(widget.birthDate);
      int calculatedAge = DateTime.now().year - birthDate.year;

      setState(() {
        age = calculatedAge;
        hrMax = 220 - calculatedAge.toDouble();
      });
    } catch (e) {
      setState(() {
        age = null;
        hrMax = 0;
      });
    }
  }

  Future<void> _pickImage(ImageSource source) async {
    final ImagePicker _picker = ImagePicker();
    final XFile? pickedFile = await _picker.pickImage(source: source);
    if (pickedFile != null) {
      setState(() {
        _profileImage = File(pickedFile.path);
      });
    }
  }

  void _showImagePickerOptions(BuildContext context) {
    showModalBottomSheet(
      context: context,
      builder: (_) {
        return SafeArea(
          child: Wrap(
            children: [
              ListTile(
                leading: Icon(Icons.camera_alt),
                title: Text("Ïπ¥Î©îÎùºÎ°ú Ï¥¨ÏòÅ"),
                onTap: () {
                  Navigator.pop(context);
                  _pickImage(ImageSource.camera);
                },
              ),
              ListTile(
                leading: Icon(Icons.photo),
                title: Text("Í∞§Îü¨Î¶¨ÏóêÏÑú ÏÑ†ÌÉù"),
                onTap: () {
                  Navigator.pop(context);
                  _pickImage(ImageSource.gallery);
                },
              ),
            ],
          ),
        );
      },
    );
  }

  Widget _buildDrawer() {
    return Drawer(
      child: ListView(
        children: [
          DrawerHeader(
            decoration: BoxDecoration(color: Colors.blue),
            child: Column(
              children: [
                GestureDetector(
                  onTap: () => _showImagePickerOptions(context),
                  child: CircleAvatar(
                    radius: 40,
                    backgroundImage:
                    _profileImage != null ? FileImage(_profileImage!) : null,
                    child: _profileImage == null
                        ? Icon(Icons.person, size: 40, color: Colors.white)
                        : null,
                  ),
                ),
                SizedBox(height: 10),
                Text(
                  widget.name,
                  style: TextStyle(color: Colors.white, fontSize: 20),
                ),
              ],
            ),
          ),
          ListTile(
            leading: Icon(Icons.person),
            title: Text("ÎÇ¥ Ï†ïÎ≥¥"),
            onTap: _showUserInfo,
          ),
          ListTile(
            leading: Icon(Icons.calculate),
            title: Text("Í≥ÑÏÇ∞Í∏∞"),
            onTap: () => Navigator.pop(context),
          ),
          ListTile(
            leading: Icon(Icons.settings),
            title: Text("ÏÑ§Ï†ï"),
            onTap: _editUserInfo,
          ),
        ],
      ),
    );
  }

  void _showUserInfo() {
    showDialog(
      context: context,
      builder: (context) {
        return AlertDialog(
          title: Text("ÎÇ¥ Ï†ïÎ≥¥"),
          content: Column(
            mainAxisSize: MainAxisSize.min,
            children: [
              Text("Ïù¥Î¶Ñ: ${widget.name}"),
              Text("ÏÑ±Î≥Ñ: ${widget.gender}"),
              Text("ÌÇ§: ${widget.height} cm"),
              Text("Ï≤¥Ï§ë: ${widget.weight} kg"),
              Text("HRmax: ${hrMax.toStringAsFixed(1)} bpm"),
              Text("VO2max: ${vo2Max != null ? vo2Max!.toStringAsFixed(1) : 'Îç∞Ïù¥ÌÑ∞ ÏóÜÏùå'} ml/kg/min"),
            ],
          ),
          actions: [
            TextButton(
              onPressed: () => Navigator.pop(context),
              child: Text("Îã´Í∏∞"),
            ),
          ],
        );
      },
    );
  }

  void _editUserInfo() {
    Navigator.pop(context);
    Navigator.push(
      context,
      MaterialPageRoute(builder: (context) => PersonalInfoScreen()),
    );
  }

  /// Hero Ïï†ÎãàÎ©îÏù¥ÏÖòÏùÑ ÏúÑÌïú Î≤ÑÌäº ÏÉùÏÑ±
  Widget _buildHeroCalculatorButton({
    required BuildContext context,
    required String title,
    required Widget destination,
    required String heroTag,
    required IconData icon,
  }) {
    return Padding(
      padding: EdgeInsets.symmetric(vertical: 10),
      child: InkWell(
        onTap: () {
          Navigator.push(context, MaterialPageRoute(builder: (_) => destination));
        },
        child: Row(
          mainAxisAlignment: MainAxisAlignment.center,
          children: [
            // Hero ÏãúÏûëÏ†ê
            Hero(
              tag: heroTag,
              child: Icon(icon, size: 32, color: Colors.blue),
            ),
            SizedBox(width: 8),
            Text(title, style: TextStyle(fontSize: 18)),
          ],
        ),
      ),
    );
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      key: _scaffoldKey,
      appBar: AppBar(
        title: Text("Ïö¥Îèô ÏÉùÎ¶¨Ìïô Í≥ÑÏÇ∞Í∏∞"),
        leading: IconButton(
          icon: Icon(Icons.menu),
          onPressed: () => _scaffoldKey.currentState?.openDrawer(),
        ),
      ),
      drawer: _buildDrawer(),
      body: Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: [
            // VO2max Hero
            _buildHeroCalculatorButton(
              context: context,
              title: "VO2max Í≥ÑÏÇ∞Í∏∞",
              icon: Icons.directions_run,
              heroTag: "vo2maxHero",
              destination: VO2maxCalculatorScreen(
                onCalculate: (double result) {
                  setState(() {
                    vo2Max = result;
                  });
                },
                age: age ?? 0,
                gender: widget.gender,
              ),
            ),
            // HRmax Hero
            _buildHeroCalculatorButton(
              context: context,
              title: "HRmax Í≥ÑÏÇ∞Í∏∞",
              icon: Icons.favorite_border,
              heroTag: "hrmaxHero",
              destination: HRmaxCalculatorScreen(hrMax: hrMax),
            ),
            // Î©îÌÉÄÎ≥ºÎ¶≠ Hero
            _buildHeroCalculatorButton(
              context: context,
              title: "ÏóêÎÑàÏßÄ ÎåÄÏÇ¨ Í∏∞Ïó¨ÎèÑ Î∂ÑÏÑù",
              icon: Icons.pie_chart_outline,
              heroTag: "metabolicHero",
              destination: MetabolicContributionScreen(),
            ),
          ],
        ),
      ),
    );
  }
}

// üü¢ 3. VO2max Í≥ÑÏÇ∞Í∏∞
class VO2maxCalculatorScreen extends StatefulWidget {
  final Function(double) onCalculate;
  final int age;
  final String gender;

  VO2maxCalculatorScreen({
    required this.onCalculate,
    required this.age,
    required this.gender,
  });

  @override
  _VO2maxCalculatorScreenState createState() => _VO2maxCalculatorScreenState();
}

class _VO2maxCalculatorScreenState extends State<VO2maxCalculatorScreen> {
  final TextEditingController _timeController = TextEditingController();
  double? _vo2max;
  String? _comparison;

  final Map<String, Map<String, double>> _averageVO2max = {
    "20-29": {"male": 42.5, "female": 35.0},
    "30-39": {"male": 40.5, "female": 33.0},
    "40-49": {"male": 38.5, "female": 30.5},
    "50-59": {"male": 35.0, "female": 28.0},
    "60+":   {"male": 30.0, "female": 25.0},
  };

  String _getAgeGroup(int age) {
    if (age < 30) {
      return "20-29";
    } else if (age < 40) {
      return "30-39";
    } else if (age < 50) {
      return "40-49";
    } else if (age < 60) {
      return "50-59";
    } else {
      return "60+";
    }
  }

  void _calculateVO2Max() {
    try {
      final inputTime = _timeController.text;
      final parts = inputTime.split(":");

      if (parts.length != 2) {
        setState(() {
          _vo2max = null;
          _comparison = "Ïò¨Î∞îÎ•∏ ÏãúÍ∞Ñ ÌòïÏãùÏù¥ ÏïÑÎãôÎãàÎã§. (Ïòà: 12:30)";
        });
        return;
      }

      final minutes = int.parse(parts[0]);
      final seconds = int.parse(parts[1]);
      final totalTime = minutes + (seconds / 60.0);

      final vo2max = 483 / totalTime + 3.5;

      setState(() {
        _vo2max = vo2max;
        _comparison = _compareVO2max(vo2max);
      });

      widget.onCalculate(vo2max);
    } catch (e) {
      setState(() {
        _vo2max = null;
        _comparison = "ÏûÖÎ†• Ïò§Î•ò! Ïò¨Î∞îÎ•∏ ÌòïÏãùÏúºÎ°ú ÏûÖÎ†•ÌïòÏÑ∏Ïöî.";
      });
    }
  }

  String _compareVO2max(double userVO2max) {
    final genderKey = (widget.gender == "ÎÇ®ÏÑ±") ? "male" : "female";
    final ageGroup = _getAgeGroup(widget.age);

    final avgMale = _averageVO2max[ageGroup]!["male"]!;
    final avgFemale = _averageVO2max[ageGroup]!["female"]!;
    final userAvg = (genderKey == "male") ? avgMale : avgFemale;

    final resultMsg = userVO2max >= userAvg
        ? "üî• ÌèâÍ∑† Ïù¥ÏÉÅ! Ïö∞ÏàòÌïú Ï≤¥Î†•ÏûÖÎãàÎã§!"
        : "‚ö† ÌèâÍ∑† Ïù¥Ìïò, Îçî ÎÜíÏùÄ VO2maxÎ•º Î™©ÌëúÎ°ú Ïö¥ÎèôÌï¥Î≥¥ÏÑ∏Ïöî!";

    return """
‚úÖ Ïó∞Î†πÎåÄ: $ageGroup
üèÉ‚Äç‚ôÇÔ∏è ÎÇ®ÏÑ± ÌèâÍ∑†: ${avgMale.toStringAsFixed(1)} ml/kg/min
üèÉ‚Äç‚ôÄÔ∏è Ïó¨ÏÑ± ÌèâÍ∑†: ${avgFemale.toStringAsFixed(1)} ml/kg/min

ÎãπÏã†Ïùò VO2max: ${userVO2max.toStringAsFixed(1)} ml/kg/min  
$resultMsg
""";
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      // Hero ÎèÑÏ∞©Ï†ê
      appBar: AppBar(
        leading: Hero(
          tag: 'vo2maxHero',
          child: Icon(Icons.directions_run),
        ),
        title: Text("VO2max Í≥ÑÏÇ∞Í∏∞"),
      ),
      body: Padding(
        padding: EdgeInsets.all(16.0),
        child: Column(
          children: [
            Text("2.4km Îã¨Î¶¨Í∏∞ Í±∏Î¶∞ ÏãúÍ∞Ñ ÏûÖÎ†• (MM:SS)",
                style: TextStyle(fontSize: 18)),
            SizedBox(height: 10),
            TextField(
              controller: _timeController,
              keyboardType: TextInputType.number,
              decoration: InputDecoration(
                border: OutlineInputBorder(),
                hintText: "Ïòà: 12:30",
              ),
            ),
            SizedBox(height: 20),
            ElevatedButton(
              onPressed: _calculateVO2Max,
              child: Text("VO2max Í≥ÑÏÇ∞"),
            ),
            SizedBox(height: 20),
            if (_vo2max != null)
              Column(
                children: [
                  Text(
                    "ÏòàÏÉÅ VO2max: ${_vo2max!.toStringAsFixed(2)} ml/kg/min",
                    style: TextStyle(fontSize: 22, fontWeight: FontWeight.bold),
                  ),
                  SizedBox(height: 10),
                  Text(
                    _comparison ?? "",
                    textAlign: TextAlign.center,
                    style: TextStyle(
                      fontSize: 16,
                      fontWeight: FontWeight.w500,
                      color: Colors.blue,
                    ),
                  ),
                ],
              )
            else
              Text(
                _comparison ?? "Ïò¨Î∞îÎ•∏ ÌòïÏãùÏúºÎ°ú ÏûÖÎ†•ÌïòÏÑ∏Ïöî (Ïòà: 12:30)",
                style: TextStyle(fontSize: 16, color: Colors.red),
              ),
          ],
        ),
      ),
    );
  }
}

// üü¢ 4. HRmax Í≥ÑÏÇ∞Í∏∞
class HRmaxCalculatorScreen extends StatelessWidget {
  final double hrMax;

  HRmaxCalculatorScreen({required this.hrMax});

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      // Hero ÎèÑÏ∞©Ï†ê
      appBar: AppBar(
        leading: Hero(
          tag: 'hrmaxHero',
          child: Icon(Icons.favorite_border),
        ),
        title: Text("HRmax Í≥ÑÏÇ∞Í∏∞"),
      ),
      body: Center(
        child: Text(
          "Í≥ÑÏÇ∞Îêú HRmax: ${hrMax.toStringAsFixed(1)} bpm",
          style: TextStyle(fontSize: 24, fontWeight: FontWeight.bold),
        ),
      ),
    );
  }
}

// üü¢ 5. ÏóêÎÑàÏßÄ ÎåÄÏÇ¨ Í∏∞Ïó¨ÎèÑ Î∂ÑÏÑù ÌôîÎ©¥
class MetabolicContributionScreen extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return Scaffold(
      // Hero ÎèÑÏ∞©Ï†ê
      appBar: AppBar(
        leading: Hero(
          tag: 'metabolicHero',
          child: Icon(Icons.pie_chart_outline),
        ),
        title: Text("ÏóêÎÑàÏßÄ ÎåÄÏÇ¨ Í∏∞Ïó¨ÎèÑ Î∂ÑÏÑù"),
      ),
      body: Center(child: Text("üöß Í∞úÎ∞ú Ï§ë")),
    );
  }
}